parameters:
- name: environments
  type: object
  default: ['d']
- name: should_dependency_check
  type: boolean
  default: false

trigger: 
  branches:
    include:
      - develop
      - feature/funcapp-transact

pr: none

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  variables: 
    - template: ../variables/vars.yml
  jobs:
  - job: Build
    displayName: Build job
    steps:
    - task: UseDotNet@2
      inputs:
        displayName: 'Use .NET 6.0.x SDK'
        packageType: 'sdk'
        version: 6.0.x

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '${{ variables.funcAppProj }}/${{ variables.funcAppProj }}.csproj'
        arguments: "--configuration Release"

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: 'publish'
        projects: 'transactgenerator'
        arguments: '--configuration Release --output $(build.artifactstagingdirectory)'
        zipAfterPublish: true
        workingDirectory: '$(Build.SourcesDirectory)/${{ variables.funcAppProj }}'
        publishWebProjects: false

    - task: PublishPipelineArtifact@1
      displayName: 'Publish artifact to pipeline'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'funcapp'

- ${{ each env in parameters.environments }}:
  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    variables:
      - template: ../variables/vars.yml
      - template: ../variables/vars-${{ env }}.yml

    jobs:
    - deployment: Deploy
      displayName: Deploy job
      environment: env_${{ env }}
      strategy:
        runOnce:
          deploy:
            steps:

              - task: AzureKeyVault@2
                displayName: 'Fetch secrets from Key Vault'
                inputs:
                  azureSubscription: ${{ variables.envDevOpsServiceConnection }}
                  KeyVaultName: ${{ variables.keyVaultName }}
                  SecretsFilter: '*'
                  runAsPreJob: true

              - task: FileTransform@1
                displayName: 'Update appsettings.json environment properties'
                inputs:
                  folderPath: '$(Pipeline.Workspace)/funcapp/*.zip'
                  targetFiles: '**/appsettings.json'
                  fileType: json

              - task: AzureFunctionApp@1
                displayName: 'Azure Function App Deploy'
                inputs:
                  azureSubscription: '${{ variables.envDevOpsServiceConnection }}'
                  appName: '${{ variables.funcAppName}}' 
                  package: '$(Pipeline.Workspace)/funcapp/*.zip'
  
  - stage: PostAzureFunctionDistdeployment_${{ env }}
    displayName: Application settings for azure function in ${{ env }}
    variables:
      - template: ../variables/vars.yml
      - template: ../variables/vars-${{ env }}.yml
    jobs: 
      - job: CheckVariable
        displayName: TroubleshootVariableIssue
        steps:
            - checkout: none
            - task: AzurePowerShell@5
              name: setVarOutput
              displayName: "Check Variable"                
              inputs:
                azureSubscription: ${{ variables.envDevOpsServiceConnection }}
                ScriptType: 'InlineScript'
                Inline: |
                    $funcTypeInternal = '${{ parameters.funcType }}'
                    $dist = "dist"
                    $meta = "meta"
                    if ($funcTypeInternal -eq $dist){
                      Write-Host "##vso[task.setvariable variable=funcName;isoutput=true]$(FunctionDistAppName)"
                    }
                    elseif ($funcTypeInternal -eq $meta){
                      Write-Output "##vso[task.setvariable variable=funcName;isoutput=true]$(FunctionMetaAppName)"
                    }
                errorActionPreference: 'continue' 
                azurePowerShellVersion: 'LatestVersion'
      - job: ApplicationSettingsAzureFunction
        displayName: Application Settings Azure Function
        dependsOn: CheckVariable
        variables:
          CheckVariableFromJob: $[ dependencies.CheckVariable.outputs['setVarOutput.funcName'] ] 
        steps:
          - checkout: none
          - task: AzureCLI@2
            displayName: 'Add ADLS dist Aplication Settings'
            inputs:
              azureSubscription: ${{ variables.EnvDevOpsServiceConnection }}
              scriptType: powershell
              scriptLocation: inlineScript
              inlineScript: |
                az functionapp config appsettings set --name $(CheckVariableFromJob) --resource-group $(EnvResourceGroupName) --settings ADLS_ACCOUNT_NAME=$(ACLstorageAccountName)
              failOnStandardError: true
            condition: eq('${{ variables.FunctionDistAppName }}',variables.CheckVariableFromJob)
          - task: AzureCLI@2
            displayName: 'Add Database metadata af Aplication Settings'
            inputs:
              azureSubscription: ${{ variables.EnvDevOpsServiceConnection }}
              scriptType: powershell
              scriptLocation: inlineScript
              inlineScript: |
                az functionapp config appsettings set --name $(FunctionMetaAppName) --resource-group $(EnvResourceGroupName) --settings DB_SERVER_NAME=$(ServerName)
              failOnStandardError: true
            condition: eq('${{ variables.FunctionMetaAppName }}',variables.CheckVariableFromJob)
          - task: AzureCLI@2
            displayName: 'Add ADLS metadata af Aplication Settings'
            inputs:
              azureSubscription: ${{ variables.EnvDevOpsServiceConnection }}
              scriptType: powershell
              scriptLocation: inlineScript
              inlineScript: |
                az functionapp config appsettings set --name $(FunctionMetaAppName) --resource-group $(EnvResourceGroupName) --settings ADLS_ACCOUNT_NAME=$(ACLstorageAccountName)
              failOnStandardError: true
            condition: eq('${{ variables.FunctionMetaAppName }}',variables.CheckVariableFromJob)
          - task: AzureCLI@2
            displayName: 'Add ADLS metadata af Aplication Settings'
            inputs:
              azureSubscription: ${{ variables.EnvDevOpsServiceConnection }}
              scriptType: powershell
              scriptLocation: inlineScript
              inlineScript: |
                az functionapp config appsettings set --name $(FunctionMetaAppName) --resource-group $(EnvResourceGroupName) --settings WEBSITE_DNS_SERVER=10.40.126.5
              failOnStandardError: true
            condition: and(succeeded(), eq('${{ env }}','t'))